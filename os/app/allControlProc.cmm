/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include "display.hmm"
#include "musicPlayProc.hmm"
#include "spi.hmm"
#include "fileControl.hmm"
#include "allControlProc.hmm"

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}
 

//-----------------------------------------------------------------------------
// 画面表示
//-----------------------------------------------------------------------------

void demoScreen() {
  cls();                                            // LCDをクリアする
  locateXY(0,0); putStr("Main Screen");
  locateXY(2,2);
  putStr("1:Playlist");
  locateXY(2,3);
  putStr("2:Album");
  locateXY(2,4);
  putStr("3:Artist");
  locateXY(2,5);
  putStr("4:All Song");
}
 

void playlist() {
  cls();
  locateXY(0,0); putStr("Playlist");
  for (int i=1; i<=5; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:back");     
}

void album() {
  cls();
  locateXY(0,0); putStr("Album");
  for (int i=1; i<=5; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:back");     
}

void artist() {
  cls();
  locateXY(0,0); putStr("Artist");
  for (int i=1; i<=5; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:back");     
}

void allSong() {
  cls();
  locateXY(0,0); putStr("All Song");
  for (int i=1; i<=5; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:back");                                 // 6番のスイッチ
}

void menu() {
  cls();
  locateXY(0,0); putStr("Menu");
}


void asta(int y) {
  locateXY(0, y);
  putCh('*');
}    



/*原型
void demoScreen() {
  cls();                                            // LCDをクリアする
  locateXY(0,0); putStr("Main Screen");
  for (int i=1; i<=5; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:stop");                                 // 6番のスイッチ
}
*/

void playlistProc() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  playlist();
  int pt = 2;
  asta(pt);                                     // 画面を初期化
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if (num==1) {
      if (pt>2){
        pt=pt-1;
      }
      playlist();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==2) {
    } else if (num==3) {
    } else if (num==4) {
    } else if (num==5) {
      if (pt<7){
        pt=pt+1;
      }
      playlist();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==6) {                                   // 6 番のスイッチが押された
      dbgPutStr("stop\n");
      shellMain();                                 // 画面を初期化
      stop();
    } else if (num>1 && mp3FilesGetName(num)!=null) { // ファイルと対応するボタン
      playlist();                                 // 画面を初期化
      play(mp3FilesGetPath(pt));                   // 再生開始
      dbgPutStr(mp3FilesGetPath(pt));
      dbgPutStr("\n");
    }
    sleep(10);                                      // 10ms に一度
  }
}


void albumProc() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  album();
  int pt = 2;
  asta(pt);                                     // 画面を初期化
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if (num==1) {
      if (pt>2){
        pt=pt-1;
      }
      album();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==2) {
    } else if (num==3) {
    } else if (num==4) {
    } else if (num==5) {
      if (pt<7){
        pt=pt+1;
      }
      album();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==6) {                                   // 6 番のスイッチが押された
      dbgPutStr("stop\n");
      shellMain();                                 // 画面を初期化
      stop();
    } else if (num>1 && mp3FilesGetName(num)!=null) { // ファイルと対応するボタン
      album();                                 // 画面を初期化
      play(mp3FilesGetPath(pt));                   // 再生開始
      dbgPutStr(mp3FilesGetPath(pt));
      dbgPutStr("\n");
    }
    sleep(10);                                      // 10ms に一度
  }
}


void artistProc() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  artist();
  int pt = 2;
  asta(pt);                                     // 画面を初期化
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if (num==1) {
      if (pt>2){
        pt=pt-1;
      }
      artist();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==2) {
    } else if (num==3) {
    } else if (num==4) {
    } else if (num==5) {
      if (pt<7){
        pt=pt+1;
      }
      artist();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==6) {                                   // 6 番のスイッチが押された
      dbgPutStr("stop\n");
      shellMain();                                 // 画面を初期化
      stop();
    } else if (num>1 && mp3FilesGetName(num)!=null) { // ファイルと対応するボタン
      artist();                                 // 画面を初期化
      play(mp3FilesGetPath(pt));                   // 再生開始
      dbgPutStr(mp3FilesGetPath(pt));
      dbgPutStr("\n");
    }
    sleep(10);                                      // 10ms に一度
  }
}


void allSongProc() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  allSong();
  int pt = 2;
  asta(pt);                                     // 画面を初期化
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if (num==1) {
      if (pt>2){
        pt=pt-1;
      }
      allSong();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==2) {
    } else if (num==3) {
    } else if (num==4) {
    } else if (num==5) {
      if (pt<7){
        pt=pt+1;
      }
      allSong();
      asta(pt);                                    // 再生中の曲に印を表示
    } else if (num==6) {                                   // 6 番のスイッチが押された
      dbgPutStr("stop\n");
      shellMain();                                 // 画面を初期化
      stop();
    } else if (num>1 && mp3FilesGetName(num)!=null) { // ファイルと対応するボタン
      allSong();                                 // 画面を初期化
      play(mp3FilesGetPath(pt));                   // 再生開始
      dbgPutStr(mp3FilesGetPath(pt));
      dbgPutStr("\n");
    }
    sleep(10);                                      // 10ms に一度
  }
}




//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  demoScreen();                                     // 画面を初期化
  int pt = 2;
  asta(pt);
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if (num==1) {
      if (pt>2){
        pt=pt-1;
      }
      demoScreen();
      asta(pt);  
    } else if (num==2) {
    } else if (num==3) {
    } else if (num==4) {
      dbgPutStr("stop\n");
      demoScreen();                                 // 画面を初期化
      stop();
    } else if (num==5) {
      if (pt<5){
        pt=pt+1;
      }
      demoScreen();
      asta(pt);
    } else if (num==6) {                                   // 6 番のスイッチが押された
      if (pt==2){
        playlistProc();
      } else if (pt==3) {
        albumProc();
      } else if (pt==4) {
        artistProc();
      } else if (pt==5) {
        allSongProc();
      }
    } else if (num>1 && mp3FilesGetName(num)!=null) { // ファイルと対応するボタン
      demoScreen();                                 // 画面を初期化
      asta(num);                                    // 再生中の曲に印を表示
      play(mp3FilesGetPath(num));                   // 再生開始
      dbgPutStr(mp3FilesGetPath(num));
      dbgPutStr("\n");
    }
    sleep(10);                                      // 10ms に一度
  }
}



/* 原型
public void shellMain() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  demoScreen();                                     // 画面を初期化
  for (;;) {
    int sw = readSw();
    int num = swToNum(sw);
    if (num==6) {                                   // 6 番のスイッチが押された
      dbgPutStr("stop\n");
      demoScreen();                                 // 画面を初期化
      stop();
    } else if (num>0 && mp3FilesGetName(num)!=null) { // ファイルと対応するボタン
      demoScreen();                                 // 画面を初期化
      asta(num);                                    // 再生中の曲に印を表示
      play(mp3FilesGetPath(num));                   // 再生開始
      dbgPutStr(mp3FilesGetPath(num));
      dbgPutStr("\n");
    }
    sleep(10);                                      // 10ms に一度
  }
}
*/

struct SongInfo{
	char[][] name;
	int time;
	int id;
	char[] path;
};
