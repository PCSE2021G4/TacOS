/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <fs.hmm>
#include "appUtil.hmm"

#include <stdlib.hmm>
#include <kernel.hmm>
#include <util.hmm>
#include "display.hmm"
#include "musicPlayProc.hmm"
#include "spi.hmm"
#include "fileControl.hmm"
#include "allControlProc.hmm"
#include "timerProc.hmm"

#define MAINNUM 0
#define PLAYLISTNUM 1
#define ALBUMNUM 2
#define ARTISTNUM 3
#define ALLSONGNUM 4
#define MENUNUM 5
#define TIMERNUM 6
#define ADDPLAYLISTNUM 7
#define PLAYNUM 8

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)
int menuCnt = 0;//長押ししてる時間

int page = 0, oldPage =0;//showListのページ数
int scene = 0, oldScene=0; //0:main, 1:playlist 2:album 3artist 4:allsong 5:menu 6:sleepTimer
int pt=2, oldPt=0; //pointer 2:一番上, 増えると下へ
char[][] dispList; //リスト表示用
int[] songIds; //画面表示してる曲のid一覧

char[][] playListString; // ={"list1","list2","list3".null}

//現在表示してる項目数取得
int getDispListSize(){
  int size = 0;
  while(dispList[size] != null) size=size+1;
  return size;
}

void nextPage(){
  int size = getDispListSize();

  if(size - (page+1)*5 > 0){
	page = page+1;
	pt = 2;
  }
  reShow(false);
}
void prevPage(){
  if(page > 0){ 
	page = page-1;
	pt = 6;
  }
  reShow(false);
}


int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    menuCnt = 1;
    //num = 4;

  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }

  if(num == -1){
    //ボタンが離された?
    if(menuCnt > 50){
      num = 40;//長押し左下(4番)
      menuCnt = 0;
    }else if(menuCnt > 0){
      int sw4 = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
      if(sw4 == 4)
        menuCnt = menuCnt+1;//まだ押されてるなら
      else{//離されたなら
        num = 4;
        menuCnt = 0;
      }
    }
  }
  return num;
}
void reShow(boolean movePt){
  if(scene == MAINNUM) showMain();
  else if(scene == PLAYLISTNUM) showList("playList", dispList,page);
  else if(scene == ALBUMNUM) showList("albumList", dispList, page);
  else if(scene == ARTISTNUM) showList("artistList", dispList, page);
  else if(scene == ALLSONGNUM) showList("songList", dispList, page);
  else if(scene == MENUNUM) showMenu();
  else if(scene == TIMERNUM) showSleepTimer();
  else if(scene == ADDPLAYLISTNUM) showList("select playlist", playListString, page);

  if(movePt){//カーソル移動
    pt = 2;
    asta(pt);                                     // 画面を初期化
  }
}
void backScene(){
  int tmpScene = scene;
  scene = oldScene;
  oldScene = tmpScene;
  reShow(true);
}

void setScene(int sceneNum){
  oldPt = pt;
  oldScene = scene;
  scene = sceneNum;//0:title, 1:playlist 2:album 3artist 4:allsong 5:menu 6:timer(sleep)
  oldPage = page;
  page = 0;
} 

//-----------------------------------------------------------------------------
// 画面表示中の処理
//-----------------------------------------------------------------------------


void playlistProc(boolean first) {                               // プレイリストでの処理
  if(first){
    setScene(PLAYLISTNUM);
    dispList = playListString;
    reShow(true);
  }

  int num = swToNum(readSw()); //ボタン入力
  if(num==1){ reShow(false); changePt(-1, 3);}
  if(num==5){ reShow(false); changePt(1, 3);}
  if (num==4) {                           // 6 番のスイッチが押された
    dbgPutStr("stop\n");
    mainProc(true);                                 // 画面を初期化
    stop();
  } else if (num==6) { // ファイルと対応するボタン
    int select_id = pt-2; //idx
    int fileSize = getFileSize();//曲数
    songIds = getSongIdsPlaylist(select_id);//id一覧

    dispList = idsToSongNames(songIds); //曲名一覧
    setSongIds(songIds); //id一覧を登録
    allSongProc(true);//歌一覧へ
    
  } else if (num==40) {                            // スイッチ４
      menuProc(true);
  }

}


void albumProc(boolean first) {                                  // アルバムでの処理
  if(first){
    setScene(ALBUMNUM);
    dispList = getAlbumNames();
    reShow(true);
  }
  int sw = readSw();
  int num = swToNum(sw);
  if(num==1){ reShow(false); changePt(-1, getDispListSize());}
  if(num==5){ reShow(false); changePt(1, getDispListSize());}
  if(num==4) {                                   // 6 番のスイッチが押された
    dbgPutStr("stop\n");
    mainProc(true);                                 // 画面を初期化
    stop();
  } else if (num ==6) { // ファイルと対応するボタン
    int select_id = pt-2+page*5; //idx
    int fileSize = getFileSize();//曲数
    songIds = getSongIdsAlbum(select_id);//id一覧

    dispList = idsToSongNames(songIds); //曲名一覧
    setSongIds(songIds); //id一覧を登録
    reShow(true);//歌一覧へ
  } else if (num==40) {                            // スイッチ４
      menuProc(true);
  }
}


void artistProc(boolean first) {                                 // アーティストでの処理
  if(first){
    dispList = getArtistNames();
    setScene(ARTISTNUM);
    reShow(true);
  }
  int sw = readSw();
  int num = swToNum(sw);
  if(num==1){ reShow(false); changePt(-1, getDispListSize());}
  if(num==5){ reShow(false); changePt(1, getDispListSize());}
  if(num==4) {                                   // 6 番のスイッチが押された
    dbgPutStr("stop\n");
    mainProc(true);                                 // 画面を初期化
    stop();
  } else if (num==6) { // ファイルと対応するボタン
    int select_id = pt-2+page*5; //idx
    int fileSize = getFileSize();//曲数
    songIds = getSongIdsArtist(select_id);//id一覧

    dispList = idsToSongNames(songIds); //曲名一覧
    setSongIds(songIds); //id一覧を登録
    allSongProc(true);//歌一覧へ 
  } else if (num==40) {                            // スイッチ４
      menuProc(true);
  }
}


void allSongProc(boolean first) {                                // 全曲での処理
  if(first){
    setScene(ALLSONGNUM);
    reShow(true);
  }
  int sw = readSw();
  int num = swToNum(sw);
  if(num==1){ reShow(false); changePt(-1, getDispListSize());} //up
  if(num==5){ reShow(false); changePt(1, getDispListSize());}
  if (num==4) {                                   // 6 番のスイッチが押された
    dbgPutStr("stop\n");
    mainProc(true);                                 // 画面を初期化
    stop();
  } else if (num==6) { // ファイルと対応するボタン
    int select_id = pt-2+page*5;
    int fileSize = getFileSize();//曲数
    play(select_id);
    playScreenProc(true);
  } else if (num==40) {                            // スイッチ４
      menuProc(true);
  }
}


void menuProc(boolean first) {                                // メニューでの処理
  if(first){
    setScene(MENUNUM);
    reShow(true);
  }

    int sw = readSw();
    int num = swToNum(sw);
    if(num==1){ reShow(false); changePt(-1, 3);}
    if(num==5){ reShow(false); changePt(1, 3);}

    if (num==4) {
      //mainProc(true);
      backScene();
    } else if (num==6) {                                   // 6 番のスイッチが押された
      if (pt==2){ //addPlaylist                                  // カーソルの位置がptの時
	//TODO
	addPlaylistProc(true);

      } else if (pt==3) {
        timerProc(true);                               // アーティストに遷移
      
      }
    }
}

void playScreenProc(boolean first){
  if(first){
    showPlay();
  }
}

int flag,num1,num2;
void timerProc(boolean first) {
  if(first){
    showSleepTimer();
    pt = 0;
    num1 = 0;//右
    astaT(pt);
    scene = TIMERNUM; //画面遷移を記録せず移動(oldSceneを触らない)
  }
    int sw = readSw();                              // スイッチ読み取り
    int num = swToNum(sw);                          // スイッチの番号を管理
    if (num==1) {  //up 
          num1=num1+1;
          pt=0;
          showSleepTimer();
          astaT(pt);
          number1(num1);
          
    } else if (num==4) { //back                           // スイッチ４
      backScene();
    } else if (num==5) {                            // スイッチ５
        if(num1>0){
          num1=num1-1;
          pt=1;
          showSleepTimer();
          astaT(pt);
          number1(num1);
        }  
    } else if (num==6) {                                   // 6 番のスイッチが押された
	setSleep(num1*60);
        backScene();
    }

}
//limit:最大
void changePt(int diff, int limit){
  limit = limit + 2 - 1; //under+1からなので-1
  int min = 2; //最小
  pt = pt + diff;
  if(limit < pt+page*5) pt = pt-diff;

  if(pt >= 5+2) nextPage();
  if(pt < min) prevPage();

  if(min > pt) pt = min;

  asta(pt);

}

void addPlaylistProc(boolean first){
  int num = swToNum(readSw());
  if(first){
  	scene = ADDPLAYLISTNUM;
	reShow(true);//画面描画
  }
  if(num==1){ reShow(false); changePt(-1, 3);}
  if(num==5){ reShow(false); changePt(1, 3);}

  if (num ==6) { // ファイルと対応するボタン
    int select_id = pt-2+page*5; //現在のidx(playlist番号)
    int song_id = oldPt-2+oldPage*5; //TODO ページ数を加味
    addPlaylist(select_id, songIds[song_id]);
    backScene();
  }
  if(num == 4) backScene();
}

//main画面操作
void mainProc(boolean first){
  int num = swToNum(readSw()); //ボタン入力
    if(first){
      setScene(MAINNUM);
      reShow(true);
    }
    if(num==1){ reShow(false); changePt(-1, 4);}
    if(num==5){ reShow(false); changePt(1, 4);}
    
    if (num==40) {                            // スイッチ４
      menuProc(true);
    } else if (num==6) {                                   // 6 番のスイッチが押された
      if (pt==2){                                   // カーソルの位置がptの時
        playlistProc(true);                             // プレイリストに遷移
      } else if (pt==3) {
        albumProc(true);                                // アルバムに遷移
      } else if (pt==4) {
        artistProc(true);                               // アーティストに遷移
      } else if (pt==5) {
        dispList = getSongNames();
        setSongIds(getSongIds()); //id一覧を登録
        songIds = getSongIds();
        allSongProc(true);                              // 全曲に遷移
      }
    }
}


//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {                           // mainの処理
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  showMain();                                     // 画面を初期化
  int pt = 2;                                       // カーソル管理用の変数
  asta(pt);                                         // asta関数でカーソル表示

  playListString = rMalloc(4);
  playListString[0]="list 1"; playListString[1]="list 2"; playListString[2] = "list 3"; playListString[3]=null;
  for (;;) {
//0:main, 1:playlist 2:album 3artist 4:allsong 5:menu 6:sleepTimer
    if(scene == 0) mainProc(false);
    else if(scene == 1) playlistProc(false);
    else if(scene == 2) albumProc(false);
    else if(scene == 3) artistProc(false);
    else if(scene == 4) allSongProc(false);
    else if(scene == 5) menuProc(false);
    else if(scene == 6) timerProc(false);
    else if(scene == 7) addPlaylistProc(false);
    else if(scene == 8) playScreenProc(false);
    sleep(10);
  }
}
