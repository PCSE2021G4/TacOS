/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mp3Proc.cmm : MP3 デコーダのドライバ
 *
 * 2020.08.30 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <fs.hmm>
#include <util.hmm>
#include "musicPlayProc.hmm"
#include "spi.hmm"
#define BUFSIZ 512                          // MP3 ファイル用のバッファ
#include "allControlProc.hmm"
#include <mm.hmm>
#include "fileControl.hmm"
#include "display.hmm"
// メッセージ
#define STOP  1                             // 再生停止要求メッセージ
#define START 2                             // 再生開始要求メッセージ

// レスポンス
#define OK  0
#define ERR 1

// ＊＊＊＊　重要！！　クライアントプロセスは一つだけの前提　＊＊＊＊
int link;                                   // メッセージ通信用のリンク
boolean syncFlag = false;                   // クライアントが同期待ちである

boolean isPlay = false; //再生中か
boolean isShuffle = false;
boolean isLoop = false;

boolean cPlay = false;
int[] nextSongIds; //再生する曲一覧
SongInfo songInfo; //再生中の曲情報
char[] path=null;

int nowPlayId = 0;
//-----------------------------------------------------------------------------
// クライアントプロセスが呼び出す
//-----------------------------------------------------------------------------

// 音楽再生停止
public void stop() {
  syncFlag = true;                          // データ転送プロセスをコマンド待にする
  isPlay = false;
  sndrec(link, STOP, 0, 0, 0);              // 同期要求メッセージ
}

// 音楽再生
public boolean play(int idsIdx) {
  nowPlayId = idsIdx;
  syncFlag = true;                          // データ転送プロセスをコマンド待にする
  isPlay = true;

  int songId = nextSongIds[idsIdx]; //次の曲id取り出し
  if(path != null) free(path);
  path = mp3FilesGetPath(songId); //path取得
  //printF("play:%s\n", path);
  int r = sndrec(link, START,
                  _AtoI(path), 0, 0);       // 再生開始メッセージ
  return r==OK;                             // 成功なら true を返す
}

//再生する曲一覧登録
public void setSongIds(int[] songIds){
  nextSongIds = songIds;
}
//-----------------------------------------------------------------------------
// 音楽データ転送用のプロセス
//-----------------------------------------------------------------------------
// MP3 データ用のバッファ
char[] buf = array(BUFSIZ);

// 音楽データをデコーダに送る
void trans(char[] path) {
  int fd = open(path, READ_MODE);           // ファイルをオープン
  if (fd<0) {                               // オープンできない
    send(link, ERR);                        //   クライアントにエラーを通知
    return;                                 //   コマンド待に戻る
  }
  send(link, OK);                           // クライアントに成功を通知
  int len;
  int kaisuu=0;
  Stat stat_data = malloc(sizeof(Stat));//file info
  stat(path, stat_data);
  if(stat_data.lenH == 0) kaisuu = stat_data.lenL/BUFSIZ+1;
  else{
      if(stat_data.lenH > 256 ) kaisuu = 32760;
      else if(stat_data.lenH > 128) kaisuu = 16380;
      else if(stat_data.lenH > 64) kaisuu = 8190;
      else if(stat_data.lenH > 32) kaisuu = 4090;
      else if(stat_data.lenH > 16) kaisuu = 2040;
      else kaisuu = 1020;
  }
  //while((len=read(fd, buf, BUFSIZ))>0) kaisuu=kaisuu+1;
  close(fd);
  fd = open(path, READ_MODE);           // ファイルをオープン)
  int kaisuu_s=0;
  int kaisuu_w=0;
  int basho=2;
  kaisuu_s = kaisuu/10;

  while ((len=read(fd, buf, BUFSIZ))>0) {   // データをファイルから読み
    spiWriteMp3Dat(buf, len);               //   MP3デコーダにデータを送る
    if (syncFlag) break;                    //   クライアントが待っている
       kaisuu_w=kaisuu_w+1;
    if(kaisuu_s < kaisuu_w){
        kaisuu_w=0;
        basho=basho+1;
        if(basho < 16 )
          locateXY(basho,6);
        putStr("*");
    }
    while(cPlay){}
  }
  spiFlushMp3();                            // デコーダLSIのバッファをクリアし
  close(fd);                                // ファイルをクローズ

  while(isLoop){
    kaisuu_w=0;
    basho=2;
    locateXY(3,6);
    putStr("          ");
    fd = open(path, READ_MODE);           // ファイルをオープン
    if (fd<0) {                               // オープンできない
      send(link, ERR);                        //   クライアントにエラーを通知
      return;                                 //   コマンド待に戻る
    }
    send(link, OK);                           // クライアントに成功を通知
    while ((len=read(fd, buf, BUFSIZ))>0) {   // データをファイルから読み
      spiWriteMp3Dat(buf, len);               //   MP3デコーダにデータを送る
      kaisuu_w=kaisuu_w+1;
      if(kaisuu_s < kaisuu_w){
        kaisuu_w=0;
        basho=basho+1;
        locateXY(basho,6);
        putStr("*");
      }
      while(cPlay){}
      if (syncFlag) break;                    //   クライアントが待っている
    }
    spiFlushMp3();                            // デコーダLSIのバッファをクリアし
    close(fd);
  } 
}

// mp3Main は，プロセスのメインルーチンとしてカーネルに登録しておく．
// ここからプロセスの実行が始まる
public void mp3Main() {
  link = newLink();                         // クライアント待受用のリンク
  for (;;) {
    Link l=receive(link);                   // クライアントから受信待ち
    syncFlag = false;                       // クライアント停止中にフラグ操作
    if (l.op==STOP) {
      send(link, OK);                       // クライアントを再開する
    } else if (l.op==START) {
      trans(_ItoA(l.prm1));                 // ファイルからデータ転送
    }
  }
}

public void changePause(){
  isPlay = !isPlay;
  //TODO pause
}

public void changeShuffle(){
  isShuffle = !isShuffle;
}

public void changeLoop(){
  isLoop = !isLoop;
}

public void volumeChange(){
  int setvol=2020;
  setvol=spiReadMp3Reg(0x0b); //now volume
  if(setvol<0xE0E0) setvol = 0x0000;
  if(setvol>0xE0CE) setvol = setvol+0x2020;
  spiWriteMp3Reg(0x0b,setvol);//volume set
}

public void changePlay(){
  cPlay = !cPlay;
}

public void nextPlay(){
  int size = 0;
  while(nextSongIds[size] != -1) size=size+1;
  if(size > nowPlayId+1){
        stop();
	play(nowPlayId+1);
  }
}

public void prevPlay(){
  if(0 <= nowPlayId-1){
        stop();
	play(nowPlayId-1);
  }
  
}
